#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct DoublyLinkedList {
    struct Node* head;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        fprintf(stderr, "Falha na alocação de memória\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct DoublyLinkedList* list, int data) {
    struct Node* newNode = createNode(data);
    if (list->head == NULL) {
        list->head = newNode;
    } else {
        struct Node* current = list->head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
        newNode->prev = current;
    }
}

void removeNode(struct DoublyLinkedList* list, int data) {
    struct Node* current = list->head;
    while (current != NULL) {
        if (current->data == data) {
            if (current->prev != NULL) {
                current->prev->next = current->next;
            } else {
                list->head = current->next;
            }
            if (current->next != NULL) {
                current->next->prev = current->prev;
            }
            free(current);
            return;
        }
        current = current->next;
    }
}

void printList(struct DoublyLinkedList* list) {
    struct Node* current = list->head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

void freeList(struct DoublyLinkedList* list) {
    struct Node* current = list->head;
    while (current != NULL) {
        struct Node* next = current->next;
        free(current);
        current = next;
    }
    list->head = NULL;
}

int main() {
    struct DoublyLinkedList myLinkedList;
    myLinkedList.head = NULL;

    clock_t startTime, endTime;
    double elapsedTime;

    // Inserção de elementos no final da lista
    startTime = clock();
    for (int i = 0; i < 100000; i++) {
        insertEnd(&myLinkedList, i);
    }
    endTime = clock();
    elapsedTime = ((double)(endTime - startTime)) / CLOCKS_PER_SEC;
    printf("Tempo de inserção: %f segundos\n", elapsedTime);

    // Impressão da lista
    printf("Lista Duplamente Encadeada: ");
    printList(&myLinkedList);

    // Remoção de elementos
    int removeData = 50000;
    startTime = clock();
    removeNode(&myLinkedList, removeData);
    endTime = clock();
    elapsedTime = ((double)(endTime - startTime)) / CLOCKS_PER_SEC;
    printf("Tempo de remoção: %f segundos\n", elapsedTime);

    // Impressão da lista após remoção
    printf("Lista Duplamente Encadeada após remoção: ");
    printList(&myLinkedList);

    // Liberar a memória alocada pela lista
    freeList(&myLinkedList);

    return 0;
}
